{"version":3,"sources":["Tei.js","Nav.js","Body.js","App.js","serviceWorker.js","index.js"],"names":["Tei","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","teiDataContainer","React","createRef","allowedViews","map","view","url","getTEI","ct","CETEI","addBehavior","undefined","getHTML5","teiData","setState","renderTei","current","innerHTML","appendChild","defaultView","indexOf","viewStyle","charAt","toUpperCase","substr","toLowerCase","react_default","a","createElement","className","concat","ref","Component","App","views","i","isActive","activeView","key","react_router_dom","to","label","Body","Fragment","src_Nav","src_Tei","_this2","react_router","path","exact","component","p","src_Body","match","params","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f100672.chunk.js","sourcesContent":["import React from 'react'\nimport CETEI from 'CETEIcean'\nimport './teiStyles/Base.scss'\nimport './teiStyles/Diplomatic.scss'\nimport './teiStyles/Diplomatic2.scss'\nimport './teiStyles/Edited.scss'\nimport './teiStyles/Modernized.scss'\n\nclass Tei extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.teiDataContainer = React.createRef()\n    this.allowedViews = this.props.allowedViews.map(view => {\n      return view.url\n    })\n  }\n\n  componentDidMount() {\n    this.getTEI()\n  }\n\n  async getTEI() {\n    const ct = new CETEI()\n    \n    // Override default CETEI TEI behaviors.\n    ct.addBehavior('tei', 'teiHeader', undefined)\n\n    const teiData = await ct.getHTML5('data/example.xml')\n    this.setState({\n      teiData\n    })\n  }\n\n  componentDidUpdate() {\n    if (this.state.teiData) {\n      this.renderTei()\n    }\n  }\n\n  renderTei() {\n    this.teiDataContainer.current.innerHTML = ''\n    this.teiDataContainer.current.appendChild(this.state.teiData)\n  }\n\n  render() {\n    let view = this.props.defaultView\n    if (this.allowedViews.indexOf(this.props.view) > -1) {\n      view = this.props.view\n    }\n    const viewStyle = view.charAt(0).toUpperCase() + view.substr(1).toLowerCase()\n    return <div className={`Tei ${viewStyle}`} ref={this.teiDataContainer}>Loading...</div>\n  }\n}\n\nexport default Tei\n","import React from 'react'\nimport './Nav.scss'\nimport { Link } from \"react-router-dom\"\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <nav className=\"Nav\">\n        <ul>\n          {this.props.views.map((view, i) => {\n            let isActive = ''\n            if ((!this.props.activeView && view.url === this.props.defaultView)\n              || this.props.activeView === view.url) {\n              isActive = 'active'\n            }\n            return (\n              <li key={`l-${i}`} className={isActive}>\n                <Link to={`/${view.url}`}>{view.label}</Link>\n              </li>\n            )\n          })}\n        </ul>\n      </nav>\n    )\n  } \n}\n\nexport default App;\n","import React from 'react'\nimport Tei from './Tei'\nimport Nav from './Nav'\n\n\nclass Body extends React.Component {\n  constructor(props) {\n    super(props)\n    this.views = [\n      {\n        url: 'diplomatic',\n        label: 'Diplomatic'\n      },\n      {\n        url: 'diplomatic2',\n        label: 'Diplomatic 2'\n      },\n      {\n        url: 'edited',\n        label: 'Edited'\n      },\n      {\n        url: 'modernized',\n        label: 'Modernized'\n      },\n    ]\n    this.defaultView = 'diplomatic'\n  }\n\n  render() {\n    return (\n      <>\n        <Nav views={this.views} activeView={this.props.view} defaultView={this.defaultView}/>\n        <Tei \n            defaultView={this.props.defaultView}\n            view={this.props.view} \n            allowedViews={this.views} />\n      </>\n    )\n  } \n}\n\nexport default Body\n","import React from 'react'\nimport './App.scss'\nimport Body from './Body'\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.views = [\n      {\n        url: 'diplomatic',\n        label: 'Diplomatic'\n      },\n      {\n        url: 'diplomatic2',\n        label: 'Diplomatic 2'\n      },\n      {\n        url: 'edited',\n        label: 'Edited'\n      },\n      {\n        url: 'modernized',\n        label: 'Modernized'\n      },\n    ]\n    this.defaultView = 'diplomatic'\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Route path=\"/:view?\" exact component={(p) => \n            <Body \n              defaultView={this.defaultView}\n              view={p.match.params.view} />} />\n        </div>\n      </Router>\n    )\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}